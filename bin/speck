#!/usr/bin/env bash

## For tests with Bash 3 on MacOS.
#!/bin/bash

set -e ## errexit
set -u ## nounset

IFS='
'
SpeckCmdDir="$(cd "$(dirname "$0")" && pwd)"
VerboseFlag=no
DebugFlag=no
LogBuffer=
ProgressBuffer=

: ${ResetStyle:=$(tput sgr0)}
: ${BoldStyle:=$(tput bold)}
: ${ReverseStyle:=$(tput rev)}

: ${GreenStyle:=$(tput setaf 120)}
: ${YellowStyle:=$(tput setaf 229)}
: ${RedStyle:=$(tput setaf 160)}
: ${BlueStyle:=$(tput setaf 75)}
: ${GrayStyle:=$(tput setaf 239)}

if test $(tput colors) -le 8; then
        GreenStyle="$(tput setaf 2)"
        YellowStyle="$(tput setaf 3)"
        RedStyle="$(tput setaf 1)"
        BlueStyle="$(tput setaf 4)"
        GrayStyle="$(tput setaf 8)"
fi

if test ! -t 1 -o -p /dev/stdout; then
        ## We are redirected or in a pipe.
        ResetStyle=
        ReverseStyle=
        GreenStyle=
        YellowStyle=
        RedStyle=
        BlueStyle=
        GrayStyle=
fi

ErrorStyle="$RedStyle"
WarningStyle="$YellowStyle"
SuccessStyle="$GreenStyle"
DimmedStyle="$GrayStyle"

: ${SpeckDumpStyle:=s|^|${GrayStyle}> |}
: ${SpeckSuiteStyle:=\\n%s:\\n\\n}
: ${SpeckSpecStyle:=%s\\n}
: ${SpeckProgressStyle:=${ReverseStyle} suites(\{suites_count\}/\{suites_total\}) specs(\{specs_count\}/\{specs_total\}) checks(\{checks_count\}/\{checks_total\})${ResetStyle}}
: ${SpeckCheckProgressStyle:=          \{desc\}}
: ${SpeckCheckSuccessStyle:=    ${SuccessStyle}ok${ResetStyle}    \{desc\}}
: ${SpeckCheckErrorStyle:=  ${ErrorStyle}failed${ResetStyle}  \{desc\}}
: ${SpeckSuccessStyle:=${SuccessStyle}${ReverseStyle} ✓ Success ${ResetStyle}}
: ${SpeckErrorStyle:=${ErrorStyle}${ReverseStyle} ✕ Error ${ResetStyle}}
: ${SpeckSummaryStyle:=\\n\{status\}  failed(${ErrorStyle}${BoldStyle}\{errors\}${ResetStyle})  succeeded(${SuccessStyle}${BoldStyle}\{completed\}${ResetStyle})  total(${BlueStyle}${BoldStyle}\{specs\}${ResetStyle})\\n}

before_all() { :; }
before()     { :; }
after()      { :; }
after_all()  { :; }

main()
{
        while test $# -gt 0; do
                case $1 in
                        -v|--verbose) VerboseFlag=yes; shift;;
                        -d|--debug) DebugFlag=yes; shift;;
                        --) shift; break;;
                        -*) usage; exit 1;;
                        *) break;;
                esac
        done

        if test "$DebugFlag" = 'yes'; then
                set -x ## xtrace
        fi

        if test $# -eq 0; then
                while read -r dir; do
                        if test -e "$dir"; then
                                set -- "$dir"
                                break
                        fi
                done <<EOF
$PWD/spec
$PWD/specs
$PWD/test
$PWD/tests
$SpeckCmdDir/spec
$SpeckCmdDir/specs
$SpeckCmdDir/test
$SpeckCmdDir/tests
EOF
        fi

        run_suites "$@"
}

onexit()
{
        tput cnorm      ## We restore cursor visibility.
        tput sgr0       ## We restore foregroung and background styles.

        test ! -e "$LogBuffer" || rm -f "$LogBuffer"
        test ! -e "$ProgressBuffer" || rm -f "$ProgressBuffer"
}

usage()
{
        echo "Usage: $(basename "$0") [ -v,--verbose ] [ -d,--debug ] [ <file_or_dir> ... ]"
}

run_suites()
{
        trap onexit TERM INT HUP EXIT

        LogBuffer="$(mktemp)"
        ProgressBuffer="$(mktemp)"

        tput clear              ## We clear the terminal.
        tput civis              ## We hide th cursor.

        local plan=''
        local exit_status=0
        local suites_total=$#
        local specs_total=0
        local checks_total=0
        local suites_count=0
        local specs_count=0
        local checks_count=0

        for suite; do
                local suite_path="${suite%/}"

                ## Workaround for a Bash 3 bug that prevents 'cd dir'
                ## when 'dir' is not written as './dir'.
                case "$suite_path" in
                          /*) ;;
                          *) suite_path="$PWD/$suite_path";;
                esac

                ## We normalize a path with '..'.
                if test -d "$suite_path"; then
                        ## The suite is a directory.
                        suite_path="$(cd "$suite_path" && pwd)"
                else
                        ## The suite is a file.
                        suite_path="$(cd "$(dirname "$suite_path")" && pwd)/$(basename "$suite_path")"
                fi

                local specs_files="$(find -L "$suite_path" -type f -maxdepth 2 \( -name "*spec.sh" -or -name "*test.sh" \) | sort -n)"
                specs_total=$(expr $specs_total + $(count_lines "$specs_files") || true)

                for spec in $specs_files; do
                        local spec_checks="$(grep -Eo '^(it|test)[_[:alnum:]]+\(\)' "$spec")"
                        checks_total=$(expr $checks_total + $(count_lines "$spec_checks") || true)

                        plan="${plan}\
suite:$suite_path
spec:$spec
checks:$(printf -- '%s' "$spec_checks" | tr '\n' ' ')
" ## We need a new line at the end for 'read' to process it.
                done
        done

        local prev_suite=
        local prev_spec=
        local suite=
        local spec=
        local checks=
        local line_count=0

        for line in $plan; do
                line_count=$(expr $line_count + 1)

                case $line_count in
                        1) suite="${line#*:}"; continue;;
                        2) spec="${line#*:}"; continue;;
                        3) checks="${line#*:}"; line_count=0;;
                esac

                if test "$prev_suite" != "$suite"; then
                        printf -- "$SpeckSuiteStyle" "${suite#$PWD/}" \
                        | log
                fi

                checks="$(printf -- '%s' "$checks" | tr ' ' '\n')"

                set +e
                run_spec "$suite" "$spec" "$checks"
                exit_status="$(expr $exit_status + $? || true)"
                set -e

                if test "$prev_suite" != "$suite"; then
                        suites_count=$(expr $suites_count + 1)
                fi

                if test "$prev_spec" != "$spec"; then
                        specs_count=$(expr $specs_count + 1)
                fi

                checks_count=$(expr $checks_count + $(count_lines "$checks"))

                progress $suites_count $suites_total $specs_count $specs_total $checks_count $checks_total

                prev_suite="$suite"
                prev_spec="$spec"
        done

        local speck_status_style="$SpeckErrorStyle"
        if test $exit_status -eq 0; then
                speck_status_style="$SpeckSuccessStyle"
        fi

        printf -- "$SpeckSummaryStyle" \
        | sed -e "s:{status}:$speck_status_style:g" \
              -e "s:{errors}:$exit_status:g" \
              -e "s:{completed}:$(expr $checks_count - $exit_status || true):g" \
              -e "s:{specs}:$checks_count:g" \
        | log

        return $exit_status
}

run_spec()
{(
        set -e

        local suite="$1"
        local spec="$2"
        local checks="$3"
        local spec_exit_status=0

        printf -- "$SpeckSpecStyle" "${spec#$suite/}" \
        | log

        __specdir__="$(dirname "$spec")"
        __specfile__="$spec"

        . "$spec"

        before_all

        for spec_check in $checks; do
                local spec_check_name="${spec_check%%\(*}"
                local spec_check_desc="$(printf -- '%s' "$spec_check_name" | tr '_' ' ')"

                set +e
                (
                set -e

                before

                printf -- "$SpeckCheckProgressStyle" \
                | sed -e "s|{desc}|$spec_check_desc|g" \
                | log

                set +e
                output="$(set -e; $spec_check_name 2>&1)"
                test $? -eq 0   ## Converts an exit status different from 0 to 1.
                local spec_check_exit_status=$?
                set -e

                local speck_check_style="$SpeckCheckErrorStyle"
                if test $spec_check_exit_status -eq 0; then
                        speck_check_style="$SpeckCheckSuccessStyle"
                fi

                printf -- "$(tput cuu1)$speck_check_style$(tput el)" \
                | sed -e "s|{desc}|$spec_check_desc|g" \
                | log

                if test -n "$output" -a "$VerboseFlag" = 'yes'; then
                        cat <<OUT | sed -e "$SpeckDumpStyle" | log
${output}${ResetStyle}
OUT
                fi

                after

                return $spec_check_exit_status
                )

                local check_exit_status=$?

                spec_exit_status=$(expr $spec_exit_status + $check_exit_status || true)
                checks_count=$(expr $checks_count + 1) ## checks_count is inherited from the parent scope.

                progress $suites_count $suites_total $specs_count $specs_total $checks_count $checks_total
        done

        after_all

        return $spec_exit_status
)}

log()
{
        cat >> "$LogBuffer"
        render
}

progress()
{
        local suites_count="$1"
        local suites_total="$2"
        local specs_count="$3"
        local specs_total="$4"
        local checks_count="$5"
        local checks_total="$6"

        printf -- "$SpeckProgressStyle" \
        | sed -e "s|{suites_count}|$suites_count|g" \
              -e "s|{suites_total}|$suites_total|g" \
              -e "s|{specs_count}|$specs_count|g" \
              -e "s|{specs_total}|$specs_total|g" \
              -e "s|{checks_count}|$checks_count|g" \
              -e "s|{checks_total}|$checks_total|g" \
        > "$ProgressBuffer"

        render
}

render()
{
        ## We clear the last line because clearing the entire screen causes glitches.
        tput cuu1       ## One line up.
        tput cuu1       ## One line up.
        # tput el1        ## Clears left.
        # tput el         ## Clears right.
        # tput ed         ## Not portable.
        # tput cd         ## Not portable.
        tput il $(tput lines)
        ## The progress line has been reset.
        tput cup 0 0    ## Moves the cursor to the beginning.
        cat "$LogBuffer"
        echo
        cat "$ProgressBuffer"
}

count_lines()
{
        wc -l <<EOF | tr -d ' '
$@
EOF
}

main "$@"
