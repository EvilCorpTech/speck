#!/usr/bin/env sh

set -e ## errexit
set -u ## nounset

IFS='
'
CmdDir="$(cd "$(dirname "$0")" && pwd)"
VerboseFlag=no
DebugFlag=no

: ${ResetStyle:=$(tput sgr0)}
: ${BoldStyle:=$(tput bold)}
: ${ReverseStyle:=$(tput rev)}

: ${GreenStyle:=$(tput setaf 120)}
: ${YellowStyle:=$(tput setaf 229)}
: ${RedStyle:=$(tput setaf 160)}
: ${BlueStyle:=$(tput setaf 75)}
: ${GrayStyle:=$(tput setaf 239)}

if test $(tput colors) -le 8; then
        GreenStyle="$(tput setaf 2)"
        YellowStyle="$(tput setaf 3)"
        RedStyle="$(tput setaf 1)"
        BlueStyle="$(tput setaf 4)"
        GrayStyle="$(tput setaf 8)"
fi

if test ! -t 1 -o -p /dev/stdout; then
        ## We are redirected or in a pipe.
        ResetStyle=
        ReverseStyle=
        GreenStyle=
        YellowStyle=
        RedStyle=
        BlueStyle=
        GrayStyle=
fi

ErrorStyle="$RedStyle"
WarningStyle="$YellowStyle"
SuccessStyle="$GreenStyle"
DimmedStyle="$GrayStyle"

: ${SpeckSuiteStyle:=%s\\n}
: ${SpeckFuncStyle:=        %s}
: ${SpeckOkStatusStyle:=\\r  ${SuccessStyle}ok${ResetStyle}\\n}
: ${SpeckErrorStatusStyle:=\\r  ${ErrorStyle}error${ResetStyle}\\n}
: ${SpeckDumpStyle:=s:^:> :}
: ${SpeckSummaryStyle:=\\nfailed(${ErrorStyle}${BoldStyle}\{errors\}${ResetStyle})  success(${SuccessStyle}${BoldStyle}\{completed\}${ResetStyle})  total(${BlueStyle}${BoldStyle}\{specs\}${ResetStyle})\\n}

before_all() { :; }
before()     { :; }
after()      { :; }
after_all()  { :; }

usage()
{
        echo "Usage: $(basename "$0") [ -v,--verbose ] [ -d,--debug ] [ <file_or_dir> ... ]"
}

run_spec_file()
{(
        set -e

        exit_status=0

        printf -- "$SpeckSuiteStyle" "${1#$CmdDir/}"

        __dir__="$(dirname "$1")"
        __file__="$1"

        . "$1"

        before_all

        set +e
        for spec_func in $2; do
                run_spec_func "${spec_func%%\(*}"
                exit_status=$(expr $exit_status + $?)
        done
        set -e

        after_all

        return $exit_status
)}

run_spec_func()
{(
        set -e

        before

        printf -- "$SpeckFuncStyle" "$1" | tr '_' ' '

        set +e
        output="$(set -e; $1 2>&1)"
        test $? -eq 0   ## Converts an exit status different from 0 to 1.
        exit_status=$?
        set -e

        if test $exit_status -gt 0; then
                printf -- "$SpeckErrorStatusStyle"
        else
                printf -- "$SpeckOkStatusStyle"
        fi

        after

        if test -n "$output" -a "$VerboseFlag" = 'yes'; then
                dump "$output"
        fi

        return $exit_status
)}

dump()
{
        cat <<OUT | sed -e "$SpeckDumpStyle"
$@
OUT
}

main()
{
        while test $# -gt 0; do
                case $1 in
                        -v|--verbose) VerboseFlag=yes; shift;;
                        -d|--debug)   DebugFlag=yes;   shift;;
                        -*)           usage; exit 1;;
                        --) shift;;
                esac
        done

        if test "$DebugFlag" = 'yes'; then
                set -x ## xtrace
        fi

        if test $# -eq 0; then
                set -- "$CmdDir"
        fi

        local exit_status=0
        local specs_count=0

        set +e
        for suite; do
                for spec_file in $(find -L "$suite" -type f -maxdepth 2 | grep -E '_(spec|test).sh$' | sort -n); do
                        local spec_funcs="$(grep -Eo '^(it|test)[_[:alnum:]]+\(\)' "$spec_file")"
                        local spec_count="$(wc -l <<EOF | tr -d ' '
$spec_funcs
EOF
)"

                        run_spec_file "$spec_file" "$spec_funcs"

                        exit_status=$(expr $exit_status + $?)
                        specs_count=$(expr $specs_count + $spec_count)
                done
        done
        set -e

        printf -- "$SpeckSummaryStyle" \
        | sed -e "s:{errors}:$exit_status:g" \
              -e "s:{completed}:$(expr $specs_count - $exit_status):g" \
              -e "s:{specs}:$specs_count:g"

        return $exit_status
}

main "$@"
